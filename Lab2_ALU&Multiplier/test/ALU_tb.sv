`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/10/26 09:51:17
// Design Name: 
// Module Name: ALU_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ALU_test;

    // 信号声明
    reg [31:0] a;
    reg [31:0] b;
    reg [11:0] op;
    wire [31:0] out;

    // 实例化 ALU 模块
    ALU myALU(
        .a(a),
        .b(b),
        .op(op),
        .out(out)
    );

    // 初始化输入信号
    initial begin
        a = 32'h00000002; // 设置输入数据 a
        b = 32'h00000001; // 设置输入数据 b

        // 执行测试用例
        op = 12'b000000000001; // 加法
        #10; // 等待 10 个时间单位

        op = 12'b000000000010; // 减法
        #10; // 等待 10 个时间单位

        op = 12'b000000000100; // 比较 a < b
        #10; // 等待 10 个时间单位

        op = 12'b000000001000; // 比较 a < b
        #10; // 等待 10 个时间单位

        op = 12'b000000010000; // 逻辑非 (a | b)
        #10; // 等待 10 个时间单位

        op = 12'b000000100000; // 逻辑与 (a & b)
        #10; // 等待 10 个时间单位

        op = 12'b000001000000; // 逻辑或 (a | b)
        #10; // 等待 10 个时间单位

        op = 12'b000010000000; // 异或 (a ^ b)
        #10; // 等待 10 个时间单位

        op = 12'b000100000000; // 逻辑左移 (a << b[4:0])
        #10; // 等待 10 个时间单位

        op = 12'b001000000000; // 逻辑右移 (a >> b[4:0])
        #10; // 等待 10 个时间单位

        op = 12'b010000000000; // 算术右移 (a >>> b[4:0])
        #10; // 等待 10 个时间单位

        op = 12'b100000000000; // 将 b 直接赋值给 out
        #10; // 等待 10 个时间单位

        // 在这里可以继续添加更多测试用例

        $finish; // 结束仿真
    end

endmodule

